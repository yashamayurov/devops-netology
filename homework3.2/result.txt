1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа; опишите ход своих мыслей, если считаете что она могла бы быть другого типа.
Команда cd - это встроенная в bash или иные оболочки, такие как например cmd в Windows. 

2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других подобных некорректных вариантах использования pipe.
~/homework211126$ cat >1.txt
first line
second line;
vagrant@vagrant:~/homework211126$ grep first 1.txt -c
1
vagrant@vagrant:~/homework211126$ grep first 1.txt | wc -l
1

3. Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?
Процесс systemd - подсистема инициализации и управления процессами в linux.

4. Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?
ls \no_dir 2>/dev/pts/1

5. Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

vagrant@vagrant:~/homework211126$ cat >1.txt
first line
second line;
vagrant@vagrant:~/homework211126$ cat 1.txt
first line
second line;
vagrant@vagrant:~/homework211126$ cat <1.txt >2.txt
vagrant@vagrant:~/homework211126$ cat 2.txt
first line
second line;


6. Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?


7. Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?
bash 5>&1 создает новый дескриптор 5 и перенаправляет его в дескриптор stdout
echo netology > /proc/$$/fd/5 выводит "netology" в дескриптор 5, который перенаправлен в stdout: на экране отобразиться "netology"

8. Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty? Напоминаем: по умолчанию через pipe передается только stdout команды слева от | на stdin команды справа. Это можно сделать, поменяв стандартные потоки местами через промежуточный новый дескриптор, который вы научились создавать в предыдущем вопросе.
 dir /123123 6>&2 2>&1 1>&6 | grep such
 dir: cannot access '/123123': No such file or directory
 6>&2 создаем новый дескриптор 6
 2>&1 пернапраляем stderr в stdout
 1>&6 перенаправление stdout  в новый дескриптор
9. Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?
  Команда cat /proc/$$/environ выводит переменные окружения для текущего процесса (сессии bash)
  то же самое выводит команда env
10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.
/proc/<PID>/cmdline содержит полную командную строку для исполняемого процесса и аргуметы командной строки.
/proc/<PID>/exe содержит фактический путь к выполненной команде


11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

Ответ: SSE 4.2

vagrant@vagrant:~$ grep sse /proc/cpuinfo
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni ssse3 cx16 pcid sse4_1 sse4_2 hypervisor lahf_lm invpcid_single pti fsgsbase invpcid md_clear flush_l1d arch_capabilities
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni ssse3 cx16 pcid sse4_1 sse4_2 hypervisor lahf_lm invpcid_single pti fsgsbase invpcid md_clear flush_l1d arch_capabilities

12. При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:
vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почитайте, почему так происходит, и как изменить поведение.

Предполагаю, что подключиться "к самомму себе" ssh не может. При использовании ключа -t ssh принудительно создаться псевдотерминал.



13. Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.
Выполнил задание следующим образом:
	1. Установка reptyr: sudo apt-get install reptyr
	2. Для теста перенапрвление установил midnight commander
	3. В сессии ssh запусти midnight commander: mc.
	4. Зашел в сессию tty через интерфейс Virtual Box
	5. Нашел pid процесса mc:
		vagrant@vagrant:~$ ps aux | grep mc
		vagrant     1063  0.6  5.4  67628 54968 pts/0    S+   08:17   0:00 mc
		vagrant     1148  0.0  0.0   8900   736 pts/1    S+   08:19   0:00 grep --color=auto mc
	6. Выполнил команду reptyr 1063 - на экране отобразился интерфейс midnight commander


14. sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.
команда tee принимает данные из одного источника и может сохранять их на выходе в нескольких местах.
echo string | sudo tee /root/new_file передает через pipe строку команде tee запущенной с правами root,у которого есть права на запись в каталог /root
